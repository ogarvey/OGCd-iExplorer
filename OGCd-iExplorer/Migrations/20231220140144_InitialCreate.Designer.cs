// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OGCdiExplorer.Models;

#nullable disable

namespace OGCdiExplorer.Migrations
{
    [DbContext(typeof(CdiContext))]
    [Migration("20231220140144_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.25");

            modelBuilder.Entity("CdiTitleDeveloper", b =>
                {
                    b.Property<int>("CdiTitlesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DevelopersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CdiTitlesId", "DevelopersId");

                    b.HasIndex("DevelopersId");

                    b.ToTable("CdiTitleDeveloper");
                });

            modelBuilder.Entity("OGCdiExplorer.Models.CdiFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CdiTitleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileSize")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CdiTitleId");

                    b.ToTable("CdiFile");
                });

            modelBuilder.Entity("OGCdiExplorer.Models.CdiTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BasePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DevelopmentCompany")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CdiTitles");
                });

            modelBuilder.Entity("OGCdiExplorer.Models.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("CdiTitleDeveloper", b =>
                {
                    b.HasOne("OGCdiExplorer.Models.CdiTitle", null)
                        .WithMany()
                        .HasForeignKey("CdiTitlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OGCdiExplorer.Models.Developer", null)
                        .WithMany()
                        .HasForeignKey("DevelopersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OGCdiExplorer.Models.CdiFile", b =>
                {
                    b.HasOne("OGCdiExplorer.Models.CdiTitle", "CdiTitle")
                        .WithMany("CdiFiles")
                        .HasForeignKey("CdiTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CdiTitle");
                });

            modelBuilder.Entity("OGCdiExplorer.Models.CdiTitle", b =>
                {
                    b.Navigation("CdiFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
